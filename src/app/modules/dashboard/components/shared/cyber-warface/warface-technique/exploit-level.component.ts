import { ChangeDetectorRef, Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  AccumulationAnnotationService,
  AccumulationDataLabelService,
  AccumulationLegendService,
  AccumulationTooltipService,
  AxisModel,
  BarSeriesService,
  CategoryService,
  ChartModule,
  ColumnSeriesService,
  DataLabelService,
  DateTimeService,
  LegendService,
  LegendSettingsModel,
  LineSeriesService,
  MultiColoredLineSeriesService,
  ParetoSeriesService,
  PieSeriesService,
  SplineAreaSeriesService,
  SplineSeriesService,
  StackingColumnSeriesService,
  StackingLineSeriesService,
  StepLineSeriesService,
  TooltipService,
  TooltipSettingsModel,
} from '@syncfusion/ej2-angular-charts';
import { SupabaseService } from '../../../../services/supabase.service';
import { startWith, Subscription } from 'rxjs';
import { Store } from '@ngrx/store';
import { formatDateTime } from '../../../../../../_metronic/layout/core/common/common-utils';
import { SocketEventType } from '../../../../models/utils-type';
import { TCTTTargetType } from '../../../../models/btth.type';
import { PayloadChannel } from '../../../../models/payload-channel';
import { EChartsOption, SeriesOption } from 'echarts';
import { NgxEchartsDirective, provideEcharts } from 'ngx-echarts';

@Component({
  selector: 'app-exploit-level',
  standalone: true,
  providers: [
    DateTimeService,
    CategoryService,
    DataLabelService,
    BarSeriesService,
    LegendService,
    TooltipService,
    provideEcharts()
  ],
  imports: [CommonModule, ChartModule, NgxEchartsDirective],
  templateUrl: './exploit-level.component.html',
  styleUrls: ['./exploit-level.component.scss'],
})
export class ExploitLevelComponent implements OnInit {
  // warface technique bar var
  public warfacePrimaryXAxis: any;
  public warfaceData?: Promise<any[]>;
  public warfaceTitle: string;
  warfacePrimaryYAxis: any;
  public warfacePalette: string[];
  public warfacePointMapping: Object;
  public totalWeaponCount: number = 0;
  public collectMarker: Object;
  private supabaseService = inject(SupabaseService);
  private cdr = inject(ChangeDetectorRef);

  startDate$: any;

  constructor() { }

  ngOnInit() {
    const today = new Date();
    const twoDaysAgo: Date = new Date(today);
    twoDaysAgo.setDate(today.getDate() - 7);

    this.startDate$ = formatDateTime(twoDaysAgo).split(' ')[0];

    // lấy sự kiện chọn vùng
    // this.supabaseService.listenToChannel('regionSelected');
    // this.eventSubscriptionArea = this.supabaseService.payload$.pipe(

    // ).subscribe(
    //   (payload) => {
    //     console.log('Received event Area From Midpanel:', payload);
    //   },
    //   (error) => {
    //     console.error('Error subscribing to event Area:', error);
    //   }
    // );
    this.subscribeToDateSelected();
    this.subscribeToRegionSelected();

    //warface bar var

    this.collectMarker = {
      dataLabel: {
        visible: true,
        position: 'Middle', // You can also set 'Middle', 'Bottom', etc.
        font: {
          fontWeight: 'bold',
          color: '#000000', // Text color
          size: '2rem', // Text size
        },
        template: '<div>${point.y}</div>', // Custom template for data label
      },
    };

    this.warfacePrimaryXAxis = {
      valueType: 'Category',
      title: '',
      labelStyle: {
        size: '2.5rem', // Change this to the desired font size
        fontWeight: 'bold', // Make the labels bold
      },
    };

    // this.warfacePointMapping = 'color'
    this.warfacePointMapping = [
      { value: 'T5', color: '#F58501' },
      { value: 'T1', color: '#1D85E7' },
      { value: 'T2', color: '#DAF7A6' },
      { value: 'T3', color: '#8b4ef5' },
    ];
    this.warfacePalette = ['#045E2B', '#045E2B', '#045E2B', '#045E2B'];

    // ky thuat tac chien
    this.warfaceData = this.supabaseService.t5_kythuattacchien().finally(() => {
      this.warfaceData!.then((data) => {
        this.totalWeaponCount = data.reduce((acc, item) => acc + item.count, 0);
        this.cdr.markForCheck();
      });
    });
  }

  exploitLevelChartOption: EChartsOption = {
    tooltip: {
      trigger: 'axis',
      axisPointer: { type: 'shadow' }
    },
    label: {
      show: true,
      color: '#fff',
      fontWeight: '500',
      fontSize: 18
    },
    legend: {
      show: true,
      orient: 'horizontal',
      left: 'center',
      bottom: 0,
      itemWidth: 20,
      // itemHeight: 14,
      textStyle: {
        fontSize: 18,
        fontWeight: 500,
      },
      icon: 'circle',
      formatter: (name: string) => {
        const seriesData = this.generateStackedSeries();
        const item = seriesData.find((s) => s.name === name);

        if (item && item.data) {
          // Tính tổng các giá trị trong cột của series
          const totalValue = (item.data as number[]).reduce((acc, val) => acc + val, 0);
          return `${name}: ${totalValue}`;
        }

        return name;
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      top: '5%',
      bottom: "20%",
      containLabel: true
    },
    yAxis: {
      type: 'category',
      data: ['H', 'MAI', 'IND', 'K', 'BRN', 'TAW'],
      axisLine: { show: false },
      axisTick: { show: false },
      axisLabel: { show: true, fontSize: 18, fontWeight: 500, color: '#000' },
    },
    xAxis: {
      type: 'value'
    },
    series: this.generateStackedSeries()
  };

  generateStackedSeries(): SeriesOption[] {
    const rawData = [
      { name: 'Mức 1 K.Thác cơ bản', data: [120, 132, 101, 134, 90, 230], color: "rgba(28, 155, 83, 1)" },
      { name: 'Mức 2 Duy trì kết nối', data: [220, 182, 191, 234, 290, 330], color: "rgba(52, 131, 251, 1)" },
      { name: 'Mức 3 Thâm nhập sâu', data: [220, 182, 191, 234, 290, 330], color: "rgba(255, 191, 74, 1)" },
      { name: 'Mức 4 Tấn công phá hủy', data: [220, 182, 191, 234, 290, 330], color: "rgba(239, 62, 46, 1)" },
    ];

    return rawData.map((item, index, array) => ({
      name: item.name,
      type: 'bar',
      stack: 'total',
      emphasis: { focus: 'self' },
      barCategoryGap: '35%',
      itemStyle: {
        borderRadius: [
          index === 0 ? 8 : 0,
          index === array.length - 1 ? 8 : 0,
          index === array.length - 1 ? 8 : 0,
          index === 0 ? 8 : 0,
        ],
        color: item.color
      },
      data: item.data
    }));
  }
  subscribeToRegionSelected() {
    //this.supabaseService.listenToChannel('regionSelected');
  }
  subscribeToDateSelected() {
    //this.supabaseService.listenToChannel('dateSelected');
  }
}
