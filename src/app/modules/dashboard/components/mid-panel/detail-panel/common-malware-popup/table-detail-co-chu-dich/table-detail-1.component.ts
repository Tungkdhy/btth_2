import { ChangeDetectorRef, Component, Input, OnInit, SimpleChanges } from '@angular/core';
import { CommonModule, formatDate } from '@angular/common';
import {
  NgbModal,
  NgbPagination,
  NgbPaginationModule,
  NgbTypeaheadModule,
} from '@ng-bootstrap/ng-bootstrap';
import { FormsModule } from '@angular/forms';
import { ConvertServiceComponent } from 'src/app/modules/dashboard/services/convert-service.component';
import { SupabaseService } from 'src/app/modules/dashboard/services/supabase.service';
import { NumberFormatPipe } from "../../../../../../../core/pipes/number-format/number-format.pipe";
import { InfoMalwareModalComponent } from '../info-malware-modal/info-malware-modal.component';
import { ExcelService } from 'src/app/modules/dashboard/services/excel.service';

@Component({
  selector: 'app-table-malware-co-chu-dich',
  standalone: true,
  imports: [
    CommonModule,
    NgbPagination,
    FormsModule,
    NgbPaginationModule,
    NgbTypeaheadModule,
    NumberFormatPipe,
],
  templateUrl: './table-detail-1.component.html',
  styleUrls: ['./table-detail-1.component.scss'],
})
export class TableDetailCoChuDichComponent implements OnInit {

  @Input() mainType: string = "";
  @Input() subType: string = "728";
  @Input() tableData: any;
  @Input() regionType: string = "all";
  @Input() startDate: string = "";
  @Input() endDate:string = "";

  @Input() isClickTrongNgay:boolean = false;
  @Input() is_common_malware:boolean = false;
  public dataSource: any[]=[];
  searchText: string = '';

  page = 1;
  pageSize = 10;
  total =0;

  constructor(
    private supabase: SupabaseService,
    private convertService:ConvertServiceComponent,
    private cdr: ChangeDetectorRef,
    private excelService: ExcelService,
    private modal: NgbModal,
  ) {}

  async ngOnInit() {

  }

  async onPageChange(page: number) {
    this.page = page;
    let data:any = await this.supabase.malwareTa21GetList(this.mainType,true,this.isClickTrongNgay,this.searchText,this.startDate,this.endDate,page,this.pageSize);

    this.dataSource = data.items;
    this.cdr.detectChanges();

  }
  async ngOnChanges(changes: SimpleChanges) {
    let data:any = await this.supabase.malwareTa21GetList(this.mainType,true,this.isClickTrongNgay,this.searchText,this.startDate,this.endDate,1,this.pageSize);
    this.dataSource = data?.items;
    this.page = data?.page_index;
    this.pageSize = data?.page_size;
    this.total = data?.total;
    this.cdr.detectChanges();
  }

  async search() {

    let data:any = await this.supabase.malwareTa21GetList(this.mainType,true,this.isClickTrongNgay,this.searchText,this.startDate,this.endDate,1,this.pageSize);
    this.dataSource = data?.items;
    this.page = data?.page_index;
    this.pageSize = data?.page_size;
    this.total = data?.total;
    this.cdr.detectChanges();
  }

  async exportExcel() {
    let data:any = await this.supabase.malwareTa21GetList(this.mainType,true,this.isClickTrongNgay,this.searchText,this.startDate,this.endDate,1,999999);
    // this.dataSource = data?.items;
    let data_sheet = [];

    for (let item of data.items) {
      data_sheet.push({
        Name:  item?.name,
        Time: formatDate(item?.created_at, "dd-MM-yyyy HH:mm:ss", 'en-US') || '',
      })
    }
    // Tạo một work sheet từ dữ liệu
    this.excelService.exportExcel(data_sheet, 'Mã độc có chủ đích');
  }

  openInfoMalwareModal(item:any): void {
    let infoModal = this.modal.open(InfoMalwareModalComponent, {
      modalDialogClass: 'dialogClass',
      centered: true,
    });
    // TODO: Pass data to child
    infoModal.componentInstance.parent_id = item?.id;
    infoModal.componentInstance.detail = item;

  }
  getTypeNetwork(type:string){
    return this.convertService.getTypeNetwork(type);
  }
  getRegionType(region:string){
    return this.convertService.getName(region);
  }
}
