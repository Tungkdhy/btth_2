import { ChangeDetectorRef, Component, Input, SimpleChanges } from '@angular/core';
import { CommonModule, formatDate } from '@angular/common';
import {
  NgbModal,
  NgbPagination,
  NgbPaginationModule,
  NgbTypeaheadModule,
} from '@ng-bootstrap/ng-bootstrap';
import { FormsModule } from '@angular/forms';
import { ConvertServiceComponent } from 'src/app/modules/dashboard/services/convert-service.component';
import { SupabaseService } from 'src/app/modules/dashboard/services/supabase.service';
import { NumberFormatPipe } from "../../../../../../../core/pipes/number-format/number-format.pipe";
import { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';
import { DetailDeviceModalComponent } from '../../../../shared/detail-device-modal/detail-device-modal.component';
import { Constant } from 'src/app/core/config/constant';
import { ExcelService } from 'src/app/modules/dashboard/services/excel.service';

@Component({
  selector: 'app-table-detail',
  standalone: true,
  imports: [
    CommonModule,
    NgbPagination,
    FormsModule,
    NgbPaginationModule,
    NgbTypeaheadModule,
    NumberFormatPipe,
    DropDownListModule
  ],
  templateUrl: './table-detail-1.component.html',
  styleUrls: ['./table-detail-1.component.scss'],
})
export class TableDetail1Component {

  @Input() mainType: string = "";
  @Input() subType: string = "728";
  @Input() tableData: any;
  @Input() regionType: string = "all";
  @Input() startDate: string = "";
  @Input() endDate: string = "";

  @Input() isClickTrongNgay: boolean = false;

  unitList: any = [];
  alert_source: string = "";
  searchText: string = '';
  statusType: string = '';

  public data: { [key: string]: Object }[] = [
    { Id: '', Name: 'Tất cả' },
    { Id: 'FMS/MMS', Name: 'FMS/MMS' },
    { Id: 'TA-21/NextAV', Name: 'TA-21/NextAV' },
    { Id: 'IBM Qradar', Name: 'IBM Qradar' },
  ];

  public fields: Object = { text: 'Name', value: 'Id' };
  public placeholder: string = 'Nguồn';
  public selectedValues: any[] = [];
  public dataSource: any[] = [];

  page = 1;
  pageSize = 4;
  total = 0;

  constructor(
    private supabase: SupabaseService,
    private convertService: ConvertServiceComponent,
    private modal: NgbModal,
    private cdr: ChangeDetectorRef,
    private excelService: ExcelService,
  ) { }

  async ngOnInit() {

    if (!localStorage.getItem('unitList')) {
      let unitList = await this.supabase.getUnit();
      this.unitList = unitList;
      localStorage.setItem('unitList', JSON.stringify(unitList));
    } else {
      let unitStr: any = localStorage?.getItem('unitList')?.toString();
      this.unitList = JSON.parse(unitStr.toString());
    }
  }

  async onPageChange(page: number) {
    this.page = page;
    let data: any = await this.supabase.mayTinhDuocLamSachMaDoc(this.mainType, this.subType, null, this.convertService.getRegionType(this.regionType), this.isClickTrongNgay, this.alert_source,this.searchText,this.statusType ,this.startDate, this.endDate, page, this.pageSize)

    this.dataSource = data.items;
    this.cdr.detectChanges();

  }

  async onChange(event: any) {
  }

  async ngOnChanges(changes: SimpleChanges) {
    this.dataSource = this.tableData?.items;
    this.page = this.tableData?.page_index;
    this.pageSize = this.tableData?.page_size;
    this.total = this.tableData?.total;
    this.cdr.detectChanges();
  }
  async search() {

    let data: any = await this.supabase.mayTinhDuocLamSachMaDoc(this.mainType, this.subType, null, this.convertService.getRegionType(this.regionType), this.isClickTrongNgay, this.alert_source,this.searchText,this.statusType ,this.startDate, this.endDate)
    this.dataSource = data?.items;
    this.page = data?.page_index;
    this.pageSize = data?.page_size;
    this.total = data?.total;
    this.cdr.detectChanges();
  }
  async exportExcel() {
    let data: any = await this.supabase.mayTinhDuocLamSachMaDoc(this.mainType, this.subType, null, this.convertService.getRegionType(this.regionType), this.isClickTrongNgay, this.alert_source,this.searchText,this.statusType ,this.startDate, this.endDate,1,99999);
    // this.dataSource = data?.items;
    let data_sheet = [];

    for (let item of data.items) {
      data_sheet.push({
        IP: item?.source_ip,
        Mac:  item?.source_mac,
        EmployeeName:item?.employee_name ,
        EmployeePosition: item?.employee_position,
        Unit: this.getUnitName(item?.unit_path),
        ParentUnit:  this.getUnitParentName(item?.unit_path),
        Rn:item?.rn,
        AlertSource: this.getAlertSource(item?.main_type, item?.alert_source),
        TypeNetwork: this.getTypeNetwork(item?.main_type),
        Region: this.getRegionType(item?.loploi),
        LastActive: formatDate(item?.last_active, "dd-MM-yyyy HH:mm:ss", 'en-US') || '',
        Status: item?.not_online ? "Không hoạt động" : "Đang hoạt động",
      })
    }
    // Tạo một work sheet từ dữ liệu
    this.excelService.exportExcel(data_sheet, 'Máy tính được làm sạch mã độc');
  }
  getAlertSource(main_type: string, alert_source: string) {

    if (alert_source == "TA-21/NextAV") {
      if (main_type == Constant.MAIN_TYPE.QS) {
        return "TA21"
      } else if (main_type == Constant.MAIN_TYPE.CD) {
        return "NextAV"
      } else {
        return alert_source
      }
    } else if(alert_source == "FMS/MMS") {
      if (main_type == Constant.MAIN_TYPE.QS) {
        return "FMS"
      } else if (main_type == Constant.MAIN_TYPE.CD) {
        return "MMS"
      } else {
        return alert_source
      }
    }else {
      return alert_source
    }
  }
  openInfoDeviceModal(serial_number: any): void {
    let infoModal = this.modal.open(DetailDeviceModalComponent, {
      modalDialogClass: 'dialogClass',
      centered: true,
    });
    // TODO: Pass data to child
    infoModal.componentInstance.serialNumber = serial_number;
    infoModal.componentInstance.type = 'SERVER';

    infoModal.componentInstance.mainType =this.mainType;
    infoModal.componentInstance.subType =this.subType;
    infoModal.componentInstance.regionType =this.regionType;
    infoModal.componentInstance.isClickTrongNgay = this.isClickTrongNgay;
    infoModal.componentInstance.startDate =this.startDate;
    infoModal.componentInstance.endDate =this.endDate;

  }
  getTypeNetwork(type: string) {
    return this.convertService.getTypeNetwork(type);
  }
  getRegionType(region: string) {
    return this.convertService.getName(region);
  }
  getValueAlertType(name: any) {
    let key: any = {
      MALWARE: 'Mã độc',
      BLACK_DOMAIN: 'Tên miền',
      INTERNET: 'Kết nối Internet',
      HUNTING: 'Bất thường',
    };
    return key[name] || '';
  }
  getUnitName(path: string) {
    return this.unitList?.find(((e: any) => e.path == path))?.name_short || '';
  }

  getUnitParentName(path: string) {

    let unit = this.unitList?.find(((e: any) => e.path == path));
    let unit_parent = this.unitList?.find(((e: any) => e.id == unit?.parent_id));
    return unit_parent?.name_short || '';
  }
}
